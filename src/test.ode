(require testlib)

(define-foreign (log ()) (s str))
(define-foreign (logi ()) (n i32))

(struct Point
	(x i32)
	(y i32))

(struct Point3D
	(xy Point)
	(z i32))

(define (new-point-3d (* Point3D)) (x i32 y i32 z i32)
	(let p (_stack_alloc Point3D (_sizeof Point3D)))
	(let inner-p (_ptr_offset (* Point) p (_field_offset Point3D xy)))
	(_store (_ptr_offset (* i32) inner-p (_field_offset Point x)) x)
	(_store (_ptr_offset (* i32) inner-p (_field_offset Point y)) y)
	(_store (_ptr_offset (* i32) p (_field_offset Point3D z)) z)
	p)

(define (point-x i32) (p (* Point))
	(let px (_ptr_offset (* i32) p (_field_offset Point x)))
	(_load px))

(define (point-y i32) (p (* Point))
	(let py (_ptr_offset (* i32) p (_field_offset Point y)))
	(_load py))

(define (point3d-z i32) (p (* Point3D))
	(let pz (_ptr_offset (* i32) p (_field_offset Point3D z)))
	(_load pz))

(define (point3d-set-z ()) (p (* Point3D) z i32)
	(let pz (_ptr_offset (* i32) p (_field_offset Point3D z)))
	(_store pz z))


(define (log-point ()) (p (* Point))
	(log "Logging point.")
	(logi (point-x p))
	(logi (point-y p)))

(define (log-point3d ()) (p (* Point3D))
	(let inner-point (_ptr_offset (* Point) p (_field_offset Point3D xy)))
	(log-point inner-point)
	(log "Logging point3d.")
	(logi (point3d-z p)))

(define (main i32) ()
	(let p (new-point-3d 0 1 5))
	(log-point3d p)
	(point3d-set-z p (+ (point3d-z p) 45))
	(point3d-z p))
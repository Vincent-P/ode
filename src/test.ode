
(struct Rect
	(x f32)
	(y f32)
	(width f32)
	(height f32))

(struct RenderList
	(rects ([] Rect))
	(rects-count u32))

(define-foreign (log ()) (chars (* u8) len u32))
(define-foreign (logi ()) (n i32))
(define-foreign (get-render-list (* RenderList)) ())


(define-global (adder i32) (n i32) (let tmp 0) (+ n 1))

(define-global (identity i32) (n i32) n)

(define-global (fib_rec i32) (n i32)
	(if (<= n 1)
		n
		(+ (fib_rec (- n 1)) (fib_rec (- n 2)))))




(struct Point
	(x i32)
	(y i32))

(struct Point3D
	(xy Point)
	(z i32))

(define-global (test i32) (x i32 y i32) (+ x 1000))

(define (new-point-3d (* Point3D)) (x i32 y i32 z i32)
	(let p (_stack_alloc Point3D (_sizeof Point3D)))
	(let inner-p (_ptr_offset (* Point) p (_field_offset Point3D xy)))
	(_store (_ptr_offset (* i32) inner-p (_field_offset Point x)) x)
	(_store (_ptr_offset (* i32) inner-p (_field_offset Point y)) y)
	(_store (_ptr_offset (* i32) p (_field_offset Point3D z)) z)
	p)

(define (is_digit bool) (c u8)
	(and (<= 48 c) (<= c 57)))

(define (day1 ()) (input (* u8) input-length u32)
	(let i-line 0)
	(let i-first 0)
	(let false 0)
	(let true 1)
	(let has-first false)
	(let has-last false)
	(let i-last 0)
	(let i 0)
	(loop
		(if (>= i input-length) (break) ())
		(let c (_load (_ptr_offset (* u8) input i)))
		(if (is_digit c)
			(if has-first
			    (begin (set i-last i) (set has-last true))
			    (begin
				(set i-first i)
				(set has-first true)))
			(if (= c 10)
				(begin
					(let first 48)
					(let last 48)
					(if has-first (set first (_load (_ptr_offset (* u8) input i-first))) ())
					(if has-last (set last (_load (_ptr_offset (* u8) input i-last))) ())
					(logi (- first 48))
					(logi (- last 48))
					(set i-line (+ i-line 1))
					(set has-first false)
					(set has-last false))
				()))
		(set i (+ i 1))))

(define (main i32) ()
	(let day1_input
"1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
")
	(log (_data day1_input) (_len day1_input))
	(day1 (_data day1_input) 1)
	0)

(define (push-rect ()) (rl (* RenderList) x f32 y f32 w f32 h f32)
	(let rects (_load_field rl rects))
	(let rects-count (_load_field rl rects-count))
	(if (< (+ rects-count 1) (_len rects))
		(begin
			(let new-rect (_ptr_offset (* Rect) (_data rects) (* rects-count (_sizeof Rect))))
			(_store_field new-rect x x)
			(_store_field new-rect y y)
			(_store_field new-rect width w)
			(_store_field new-rect height h)
			())
		())
	(_store_field rl rects-count (+ rects-count 1)))

(define (render ()) ()
	(let rl (get-render-list))
	(push-rect rl 0.0 0.0 0.25 0.25)
	(push-rect rl 0.0 0.2 0.33 0.25)

	(push-rect rl 0.0 0.6 0.25 0.25)
	)

(define (update ()) ()
	(let n 0)
	(let update-msg "update ahahah!")
	(log (_data update-msg) (_len update-msg))
	(render))
(require "testlib")

(struct Point
	(x i32)
	(y i32))

(struct Point3D
	(xy Point)
	(z i32))

(define-global (test i32) (x i32 y i32) (+ x 1000))

(define (new-point-3d (* Point3D)) (x i32 y i32 z i32)
	(let p (_stack_alloc Point3D (_sizeof Point3D)))
	(let inner-p (_ptr_offset (* Point) p (_field_offset Point3D xy)))
	(_store (_ptr_offset (* i32) inner-p (_field_offset Point x)) x)
	(_store (_ptr_offset (* i32) inner-p (_field_offset Point y)) y)
	(_store (_ptr_offset (* i32) p (_field_offset Point3D z)) z)
	p)

(define (main i32) ()
	(let n (fib_rec 8))
	(logi n)
	(logi 32)
	n)

(define (is_digit bool) (c u8)
	(and (<= 48 c) (<= c 57)))

(define (day1 ()) (input (* u8) input-length u32)
	(let i-line 0)
	(let i-first 0)
	(let false 0)
	(let has-first false)
	(let i-last 0)
	(let i 0)
	(loop
		(if (>= i input-length) (break) ())
		(let c (load (_ptr_offset (* u8) input i)))
		(if (is_digit c)
			(if has-first
				(set i-last i)
				(seq
					(set i-first i)
					(set has-first true)))
			(if (= c 10)
				(set i-line (+ i-line 1))
				(set has-first false)
				()))
		(set i (+ i 1))))

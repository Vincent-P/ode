(struct Rect
	(x f32)
	(y f32)
	(width f32)
	(height f32))

(struct RenderList
	(rects ([] Rect))
	(rects-count u32))
(define (push-rect ()) (rl (* RenderList) x f32 y f32 w f32 h f32)
	(let rects (load-field rl rects))
	(let rects-count (load-field rl rects-count))
	(if (< (+ rects-count 1) (load-field rects len))
		(begin
			(let new-rect (_ptr_offset (load-field rects data) (* rects-count (_sizeof Rect))))
			(store-field new-rect x x)
			(store-field new-rect y y)
			(store-field new-rect width w)
			(store-field new-rect height h)
			(store-field rl rects-count (+ rects-count 1))
			())
		()))

(define (render ()) ()
	(let rl (get-render-list))
	(push-rect rl 0.0 0.0 100.0 200.0)
	(push-rect rl 100.0 0.0 100.0 200.0)
	(push-rect rl 0.0 100.0 100.0 200.0))

(define (update ()) ()
	(render))


== Current progress:
- Builtins? or Opcodes for everything?
- Missing feature: we can import global functions, but we can't import structs.
- Implementing floats

== Structs
How to implement structs?
The current idea is to remove "value" structs. No passing by value anywhere. No structs in local variables, no structs in function arguments.
This makes it easy to implement local variables and function arguments, as they are guaranteed to be "primitive" types.
It also mimics how assembly works.
No passing by value vs passing by reference problem.

But:
It doesn't align with what I have in mind for ode. I would like to have modules that only export table of data (struct type + array of objects).
How to implement that? Local module memory? In a sense it should work the same way as "constants" memory... So should it be possible to include constants?
"Global" variables where struct are allowed by value?

(field <expr> <identifier>) -> (* T)
(load-field <expr> <identifier>) -> T
(store-field <expr> <identifier> <value>)



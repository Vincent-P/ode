(define-global (adder i32) (n i32) (let tmp 0) (+ n 1))

(define-global (identity i32) (n i32) n)

(define-global (fib_rec i32) (n i32)
	(if (<= n 1)
		n
		(+ (fib_rec (- n 1)) (fib_rec (- n 2)))))

(define-foreign (log ()) (chars (* u8) len u32))
(define-foreign (logi ()) (n i32))
(define-foreign (logb ()) (n bool))
(define-foreign (logf ()) (n f32))


(struct Rect
	(x f32)
	(y f32)
	(width f32)
	(height f32))

(struct RenderList
	(rects ([] Rect))
	(rects-count u32))
(define-foreign (get-render-list (* RenderList)) ())

(struct GameState
	(ball/x f32)
	(ball/y f32)	
	(ball/speed f32)
	(ball/dir/x f32)
	(ball/dir/y f32)
	(paddle/x f32)
	(paddle/y f32)
	(score i32)
	(is-initialized i32))
(define-foreign (get-game-state (* GameState)) ())

(struct Input
	(up i32)
	(down i32))
(define-foreign (get-input (* Input)) ())



(define (push-rect ()) (rl (* RenderList) x f32 y f32 w f32 h f32)
	(let rects (_load_field rl rects))
	(let rects-count (_load_field rl rects-count))
	(when (< (+ rects-count 1) (_len rects))
		(let new-rect (_ptr_offset (* Rect) (_data rects) (* rects-count (_sizeof Rect))))
		(_store_field new-rect x x)
		(_store_field new-rect y y)
		(_store_field new-rect width w)
		(_store_field new-rect height h)
		(_store_field rl rects-count (+ rects-count 1))))

(define (init ()) (gs (* GameState))
	(_store_field gs ball/x 0.0)
	(_store_field gs ball/y 0.0)
	(_store_field gs ball/speed 0.01)
	(_store_field gs ball/dir/x 1.0)
	(_store_field gs ball/dir/y 0.5)
	(_store_field gs paddle/x -0.95)
	(_store_field gs paddle/y 0.0)
	(_store_field gs score 0)
	(_store_field gs is-initialized 1))

(define-global (render ()) ()
	(let rl (get-render-list))
	(let gs (get-game-state))
	(let input (get-input))

	(unless (_load_field gs is-initialized)
	    (init gs))

	(let paddle/size/x 0.05)
	(let paddle/size/y 0.5)
	(let ball/size/x 0.05)
	(let ball/size/y 0.05)

	(let px (_load_field gs paddle/x))
	(let py (_load_field gs paddle/y))
	(when (_load_field input down)
	    (when (> py -1.0)
	    	(set py (- py 0.03))))
	(when (_load_field input up)
	    (when (< py (- 1.0 paddle/size/y))
	    	(set py (+ py 0.03))))
	(_store_field gs paddle/x px)
	(_store_field gs paddle/y py)

	(let bx (_load_field gs ball/x))
	(let by (_load_field gs ball/y))
	(let dx (_load_field gs ball/dir/x))
	(let dy (_load_field gs ball/dir/y))

	(let ball-is-inside-paddle/x (and (< px bx) (< bx (+ px paddle/size/x))))
	(let ball-is-inside-paddle/y (and (< py by) (< by (+ py paddle/size/y))))
	(let ball-is-inside-paddle (and ball-is-inside-paddle/x ball-is-inside-paddle/y))

	(let ball-is-outside-screen/x (or (> -1.0 bx) (> bx (- 1.0 ball/size/x))))
	(let ball-is-outside-screen/y (or (> -1.0 by) (> by (- 1.0 ball/size/y))))

	(when ball-is-outside-screen/x (set dx (* dx -1.0)))
	(when ball-is-outside-screen/y (set dy (* dy -1.0)))

	(when ball-is-inside-paddle
	      (set dx (* dx -1.0))
	      (_store_field gs score (+ (_load_field gs score) 1))
	      (_store_field gs ball/speed (+ (_load_field gs ball/speed) 0.001)))

	(set bx (+ bx (* dx (_load_field gs ball/speed))))
	(set by (+ by (* dy (_load_field gs ball/speed))))
	(_store_field gs ball/x bx)
	(_store_field gs ball/y by)
	(_store_field gs ball/dir/x dx)
	(_store_field gs ball/dir/y dy)

	(push-rect rl px py paddle/size/x paddle/size/y)
	(push-rect rl bx by ball/size/x ball/size/y)

	(let i 0)
	(let cursor/x (+ -1.0 0.03))
	(let cursor/y (+ -1.0 0.03))
	(loop
		(when (> i (_load_field gs score)) (break))
		(set cursor/x (+ cursor/x 0.1))
		(when (> (+ cursor/x 0.07) 1.0)
		      (set cursor/x (+ -1.0 0.03))
		      (set cursor/y (+ cursor/y 0.1)))
		(push-rect rl cursor/x cursor/y 0.02 0.02)
		(set i (+ i 1)))
)
